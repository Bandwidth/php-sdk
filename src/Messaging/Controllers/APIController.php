<?php
/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\Messaging\Controllers;

use BandwidthLib\APIException;
use BandwidthLib\APIHelper;
use BandwidthLib\Messaging\Exceptions;
use BandwidthLib\Messaging\Models;
use BandwidthLib\Controllers\BaseController;
use BandwidthLib\Http\ApiResponse;
use BandwidthLib\Http\HttpRequest;
use BandwidthLib\Http\HttpResponse;
use BandwidthLib\Http\HttpMethod;
use BandwidthLib\Http\HttpContext;
use BandwidthLib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class APIController extends BaseController
{
    public function __construct($config, $httpCallBack = null)
    {
        parent::__construct($config, $httpCallBack);
    }

    /**
     * listMedia
     *
     * @param string $userId             TODO: type description here
     * @param string $continuationToken  (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listMedia(
        $userId,
        $continuationToken = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/users/{userId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'userId'             => $userId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => BaseController::USER_AGENT,
            'Accept'           => 'application/json',
            'Continuation-Token' => $continuationToken
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\MessagingException('400 Request is malformed or invalid', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\MessagingException(
                '401 The specified user does not have access to the account',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\MessagingException('403 The user does not have access to this API', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\MessagingException('404 Path not found', $_httpContext);
        }

        if ($response->code == 415) {
            throw new Exceptions\MessagingException('415 The content-type of the request is incorrect', $_httpContext);
        }

        if ($response->code == 429) {
            throw new Exceptions\MessagingException('429 The rate limit has been reached', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray($response->body, 'BandwidthLib\\Messaging\\Models\\Media');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * getMedia
     *
     * @param string $userId  TODO: type description here
     * @param string $mediaId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getMedia(
        $userId,
        $mediaId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/users/{userId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'userId'  => $userId,
            'mediaId' => $mediaId,
            ), false
        );

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\MessagingException('400 Request is malformed or invalid', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\MessagingException(
                '401 The specified user does not have access to the account',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\MessagingException('403 The user does not have access to this API', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\MessagingException('404 Path not found', $_httpContext);
        }

        if ($response->code == 415) {
            throw new Exceptions\MessagingException('415 The content-type of the request is incorrect', $_httpContext);
        }

        if ($response->code == 429) {
            throw new Exceptions\MessagingException('429 The rate limit has been reached', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $deserializedResponse = $response->body;
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * uploadMedia
     *
     * @param string  $userId         TODO: type description here
     * @param string  $mediaId        TODO: type description here
     * @param integer $contentLength  TODO: type description here
     * @param string  $body           TODO: type description here
     * @param string  $contentType    (optional) Example: application/octet-stream
     * @param string  $cacheControl   (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function uploadMedia(
        $userId,
        $mediaId,
        $contentLength,
        $body,
        $contentType = 'application/octet-stream',
        $cacheControl = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/users/{userId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'userId'         => $userId,
            'mediaId'        => $mediaId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Content-Length'  => $contentLength,
            'Content-Type'    => (null != $contentType) ? $contentType : 'application/octet-stream',
            'Cache-Control'   => $cacheControl
        );

        //json encode body
        $_bodyJson = $body;

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\MessagingException('400 Request is malformed or invalid', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\MessagingException(
                '401 The specified user does not have access to the account',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\MessagingException('403 The user does not have access to this API', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\MessagingException('404 Path not found', $_httpContext);
        }

        if ($response->code == 415) {
            throw new Exceptions\MessagingException('415 The content-type of the request is incorrect', $_httpContext);
        }

        if ($response->code == 429) {
            throw new Exceptions\MessagingException('429 The rate limit has been reached', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * deleteMedia
     *
     * @param string $userId  TODO: type description here
     * @param string $mediaId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteMedia(
        $userId,
        $mediaId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/users/{userId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'userId'  => $userId,
            'mediaId' => $mediaId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\MessagingException('400 Request is malformed or invalid', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\MessagingException(
                '401 The specified user does not have access to the account',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\MessagingException('403 The user does not have access to this API', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\MessagingException('404 Path not found', $_httpContext);
        }

        if ($response->code == 415) {
            throw new Exceptions\MessagingException('415 The content-type of the request is incorrect', $_httpContext);
        }

        if ($response->code == 429) {
            throw new Exceptions\MessagingException('429 The rate limit has been reached', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * createMessage
     *
     * @param string                $userId TODO: type description here
     * @param Models\MessageRequest $body   (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createMessage(
        $userId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/users/{userId}/messages';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'userId' => $userId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\MessagingException('400 Request is malformed or invalid', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\MessagingException(
                '401 The specified user does not have access to the account',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\MessagingException('403 The user does not have access to this API', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\MessagingException('404 Path not found', $_httpContext);
        }

        if ($response->code == 415) {
            throw new Exceptions\MessagingException('415 The content-type of the request is incorrect', $_httpContext);
        }

        if ($response->code == 429) {
            throw new Exceptions\MessagingException('429 The rate limit has been reached', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Messaging\\Models\\BandwidthMessage');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }
}
