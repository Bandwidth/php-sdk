<?php

declare(strict_types=1);

/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\Messaging\Controllers;

use BandwidthLib\Exceptions\ApiException;
use BandwidthLib\ApiHelper;
use BandwidthLib\ConfigurationInterface;
use BandwidthLib\Controllers\BaseController;
use BandwidthLib\Http\ApiResponse;
use BandwidthLib\Http\HttpRequest;
use BandwidthLib\Http\HttpResponse;
use BandwidthLib\Http\HttpMethod;
use BandwidthLib\Http\HttpContext;
use BandwidthLib\Http\HttpCallBack;
use BandwidthLib\Server;
use Unirest\Request;

class APIController extends BaseController
{
    public function __construct(ConfigurationInterface $config, ?HttpCallBack $httpCallBack = null)
    {
        parent::__construct($config, $httpCallBack);
    }

    /**
     * listMedia
     *
     * @param string $accountId User's account ID
     * @param string|null $continuationToken Continuation token used to retrieve subsequent media.
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listMedia(string $accountId, ?string $continuationToken = null): ApiResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/media';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId'          => $accountId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'       => BaseController::USER_AGENT,
            'Accept'           => 'application/json',
            'Continuation-Token' => $continuationToken
        ];

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_queryUrl, $_headers);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray($response->body, 'BandwidthLib\\Messaging\\Models\\Media');
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }

    /**
     * getMedia
     *
     * @param string $accountId User's account ID
     * @param string $mediaId Media ID to retrieve
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMedia(string $accountId, string $mediaId): ApiResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
            'mediaId'   => $mediaId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT
        ];

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_queryUrl, $_headers);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $deserializedResponse = $response->body;
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }

    /**
     * uploadMedia
     *
     * @param string $accountId User's account ID
     * @param string $mediaId The user supplied custom media ID
     * @param \BandwidthLib\Utils\FileWrapper $body
     * @param string|null $contentType The media type of the entity-body
     * @param string|null $cacheControl General-header field is used to specify directives that
     *                                  MUST be obeyed by all caching mechanisms along the
     *                                  request/response chain.
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadMedia(
        string $accountId,
        string $mediaId,
        \BandwidthLib\Utils\FileWrapper $body,
        ?string $contentType = 'application/octet-stream',
        ?string $cacheControl = null
    ): ApiResponse {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId'     => $accountId,
            'mediaId'       => $mediaId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Content-Type'    => (null != $contentType) ?
                $contentType : 'application/octet-stream',
            'Cache-Control'   => $cacheControl
        ];

        //json encode body
        $_bodyJson = $body;

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::put($_queryUrl, $_headers, $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiResponse::createFromContext(null, null, $_httpContext);
    }

    /**
     * deleteMedia
     *
     * @param string $accountId User's account ID
     * @param string $mediaId The media ID to delete
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteMedia(string $accountId, string $mediaId): ApiResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/media/{mediaId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
            'mediaId'   => $mediaId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT
        ];

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::delete($_queryUrl, $_headers);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiResponse::createFromContext(null, null, $_httpContext);
    }

    /**
     * getMessages
     *
     * @param string $accountId User's account ID
     * @param string|null $messageId The ID of the message to search for. Special characters need
     *                               to be encoded using URL encoding
     * @param string|null $sourceTn The phone number that sent the message
     * @param string|null $destinationTn The phone number that received the message
     * @param string|null $messageStatus The status of the message. One of RECEIVED, QUEUED,
     *                                   SENDING, SENT, FAILED, DELIVERED, ACCEPTED, UNDELIVERED
     * @param int|null $errorCode The error code of the message
     * @param string|null $fromDateTime The start of the date range to search in ISO 8601 format.
     *                                  Uses the message receive time. The date range to search in
     *                                  is currently 14 days.
     * @param string|null $toDateTime The end of the date range to search in ISO 8601 format. Uses
     *                                the message receive time. The date range to search in is
     *                                currently 14 days.
     * @param string|null $pageToken A base64 encoded value used for pagination of results
     * @param int|null $limit The maximum records requested in search result. Default 100. The sum
     *                        of limit and after cannot be more than 10000
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMessages(
        string $accountId,
        ?string $messageId = null,
        ?string $sourceTn = null,
        ?string $destinationTn = null,
        ?string $messageStatus = null,
        ?int $errorCode = null,
        ?string $fromDateTime = null,
        ?string $toDateTime = null,
        ?string $pageToken = null,
        ?int $limit = null
    ): ApiResponse {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/messages';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId'     => $accountId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'messageId'     => $messageId,
            'sourceTn'      => $sourceTn,
            'destinationTn' => $destinationTn,
            'messageStatus' => $messageStatus,
            'errorCode'     => $errorCode,
            'fromDateTime'  => $fromDateTime,
            'toDateTime'    => $toDateTime,
            'pageToken'     => $pageToken,
            'limit'         => $limit,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        ];

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_queryUrl, $_headers);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Messaging\\Models\\BandwidthMessagesList'
        );
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }

    /**
     * createMessage
     *
     * @param string $accountId User's account ID
     * @param \BandwidthLib\Messaging\Models\MessageRequest $body
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createMessage(string $accountId, \BandwidthLib\Messaging\Models\MessageRequest $body): ApiResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/users/{accountId}/messages';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::MESSAGINGDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getMessagingBasicAuthUserName(), $this->config->getMessagingBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_queryUrl, $_headers, $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '400 Request is malformed or invalid',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '401 The specified user does not have access to the account',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '403 The user does not have access to this API',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '404 Path not found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 415) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '415 The content-type of the request is incorrect',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\Messaging\\Exceptions\\MessagingException',
                '429 The rate limit has been reached',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Messaging\\Models\\BandwidthMessage');
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }
}
