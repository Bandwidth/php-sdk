<?php

declare(strict_types=1);

/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\TwoFactorAuth\Controllers;

use BandwidthLib\Exceptions\ApiException;
use BandwidthLib\ApiHelper;
use BandwidthLib\ConfigurationInterface;
use BandwidthLib\Controllers\BaseController;
use BandwidthLib\Http\ApiResponse;
use BandwidthLib\Http\HttpRequest;
use BandwidthLib\Http\HttpResponse;
use BandwidthLib\Http\HttpMethod;
use BandwidthLib\Http\HttpContext;
use BandwidthLib\Http\HttpCallBack;
use BandwidthLib\Server;
use Unirest\Request;

class MFAController extends BaseController
{
    public function __construct(ConfigurationInterface $config, ?HttpCallBack $httpCallBack = null)
    {
        parent::__construct($config, $httpCallBack);
    }

    /**
     * Allows a user to send a MFA code through a phone call
     *
     * @param string $accountId Bandwidth Account ID with Voice service enabled
     * @param \BandwidthLib\TwoFactorAuth\Models\TwoFactorCodeRequestSchema $body
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createVoiceTwoFactor(
        string $accountId,
        \BandwidthLib\TwoFactorAuth\Models\TwoFactorCodeRequestSchema $body
    ): ApiResponse {
        //prepare query string for API call
        $_queryBuilder = '/accounts/{accountId}/code/voice';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::TWOFACTORAUTHDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getTwoFactorAuthBasicAuthUserName(), $this->config->getTwoFactorAuthBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_queryUrl, $_headers, $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'If there is any issue with values passed in by the user',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\UnauthorizedRequestException',
                'Authentication is either incorrect or not present',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ForbiddenRequestException',
                'The user is not authorized to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 500) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'An internal server error occurred',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\TwoFactorAuth\\Models\\TwoFactorVoiceResponse'
        );
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }

    /**
     * Allows a user to send a MFA code through a text message (SMS)
     *
     * @param string $accountId Bandwidth Account ID with Messaging service enabled
     * @param \BandwidthLib\TwoFactorAuth\Models\TwoFactorCodeRequestSchema $body
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createMessagingTwoFactor(
        string $accountId,
        \BandwidthLib\TwoFactorAuth\Models\TwoFactorCodeRequestSchema $body
    ): ApiResponse {
        //prepare query string for API call
        $_queryBuilder = '/accounts/{accountId}/code/messaging';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::TWOFACTORAUTHDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getTwoFactorAuthBasicAuthUserName(), $this->config->getTwoFactorAuthBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_queryUrl, $_headers, $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'If there is any issue with values passed in by the user',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\UnauthorizedRequestException',
                'Authentication is either incorrect or not present',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ForbiddenRequestException',
                'The user is not authorized to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 500) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'An internal server error occurred',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\TwoFactorAuth\\Models\\TwoFactorMessagingResponse'
        );
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }

    /**
     * Allows a user to verify an MFA code
     *
     * @param string $accountId Bandwidth Account ID with Two-Factor enabled
     * @param \BandwidthLib\TwoFactorAuth\Models\TwoFactorVerifyRequestSchema $body
     *
     * @return ApiResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createVerifyTwoFactor(
        string $accountId,
        \BandwidthLib\TwoFactorAuth\Models\TwoFactorVerifyRequestSchema $body
    ): ApiResponse {
        //prepare query string for API call
        $_queryBuilder = '/accounts/{accountId}/code/verify';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'accountId' => $accountId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri(Server::TWOFACTORAUTHDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getTwoFactorAuthBasicAuthUserName(), $this->config->getTwoFactorAuthBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_queryUrl, $_headers, $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'If there is any issue with values passed in by the user',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 401) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\UnauthorizedRequestException',
                'Authentication is either incorrect or not present',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ForbiddenRequestException',
                'The user is not authorized to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 429) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'The user has made too many bad requests and is temporarily locked out',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 500) {
            throw $this->createExceptionFromJson(
                '\\BandwidthLib\\TwoFactorAuth\\Exceptions\\ErrorWithRequestException',
                'An internal server error occurred',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\TwoFactorAuth\\Models\\TwoFactorVerifyCodeResponse'
        );
        return ApiResponse::createFromContext($response->body, $deserializedResponse, $_httpContext);
    }
}
