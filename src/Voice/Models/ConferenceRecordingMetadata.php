<?php

declare(strict_types=1);

/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\Voice\Models;

use BandwidthLib\Utils\DateTimeHelper;

class ConferenceRecordingMetadata implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountId;

    /**
     * @var string|null
     */
    private $conferenceId;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $recordingId;

    /**
     * @var string|null
     */
    private $duration;

    /**
     * @var int|null
     */
    private $channels;

    /**
     * @var \DateTime|null
     */
    private $startTime;

    /**
     * @var \DateTime|null
     */
    private $endTime;

    /**
     * @var string|null
     */
    private $fileFormat;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $mediaUrl;

    /**
     * Returns Account Id.
     */
    public function getAccountId(): ?string
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     *
     * @maps accountId
     */
    public function setAccountId(?string $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns Conference Id.
     */
    public function getConferenceId(): ?string
    {
        return $this->conferenceId;
    }

    /**
     * Sets Conference Id.
     *
     * @maps conferenceId
     */
    public function setConferenceId(?string $conferenceId): void
    {
        $this->conferenceId = $conferenceId;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Recording Id.
     */
    public function getRecordingId(): ?string
    {
        return $this->recordingId;
    }

    /**
     * Sets Recording Id.
     *
     * @maps recordingId
     */
    public function setRecordingId(?string $recordingId): void
    {
        $this->recordingId = $recordingId;
    }

    /**
     * Returns Duration.
     *
     * Format is ISO-8601
     */
    public function getDuration(): ?string
    {
        return $this->duration;
    }

    /**
     * Sets Duration.
     *
     * Format is ISO-8601
     *
     * @maps duration
     */
    public function setDuration(?string $duration): void
    {
        $this->duration = $duration;
    }

    /**
     * Returns Channels.
     */
    public function getChannels(): ?int
    {
        return $this->channels;
    }

    /**
     * Sets Channels.
     *
     * @maps channels
     */
    public function setChannels(?int $channels): void
    {
        $this->channels = $channels;
    }

    /**
     * Returns Start Time.
     */
    public function getStartTime(): ?\DateTime
    {
        return $this->startTime;
    }

    /**
     * Sets Start Time.
     *
     * @maps startTime
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStartTime(?\DateTime $startTime): void
    {
        $this->startTime = $startTime;
    }

    /**
     * Returns End Time.
     */
    public function getEndTime(): ?\DateTime
    {
        return $this->endTime;
    }

    /**
     * Sets End Time.
     *
     * @maps endTime
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEndTime(?\DateTime $endTime): void
    {
        $this->endTime = $endTime;
    }

    /**
     * Returns File Format.
     */
    public function getFileFormat(): ?string
    {
        return $this->fileFormat;
    }

    /**
     * Sets File Format.
     *
     * @maps fileFormat
     */
    public function setFileFormat(?string $fileFormat): void
    {
        $this->fileFormat = $fileFormat;
    }

    /**
     * Returns Status.
     *
     * The current status of the recording. Current possible values are 'processing', 'partial', 'complete',
     * 'deleted', and 'error'. Additional states may be added in the future, so your application must be
     * tolerant of unknown values.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * The current status of the recording. Current possible values are 'processing', 'partial', 'complete',
     * 'deleted', and 'error'. Additional states may be added in the future, so your application must be
     * tolerant of unknown values.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Media Url.
     */
    public function getMediaUrl(): ?string
    {
        return $this->mediaUrl;
    }

    /**
     * Sets Media Url.
     *
     * @maps mediaUrl
     */
    public function setMediaUrl(?string $mediaUrl): void
    {
        $this->mediaUrl = $mediaUrl;
    }

    /**
     * Encode this object to JSON
     *
     * @return mixed
     */
    public function jsonSerialize()
    {
        $json = [];
        $json['accountId']    = $this->accountId;
        $json['conferenceId'] = $this->conferenceId;
        $json['name']         = $this->name;
        $json['recordingId']  = $this->recordingId;
        $json['duration']     = $this->duration;
        $json['channels']     = $this->channels;
        $json['startTime']    =
            isset($this->startTime) ?
            DateTimeHelper::toRfc3339DateTime($this->startTime) : null;
        $json['endTime']      =
            isset($this->endTime) ?
            DateTimeHelper::toRfc3339DateTime($this->endTime) : null;
        $json['fileFormat']   = $this->fileFormat;
        $json['status']       = $this->status;
        $json['mediaUrl']     = $this->mediaUrl;

        return array_filter($json, function ($val) {
            return $val !== null;
        });
    }
}
