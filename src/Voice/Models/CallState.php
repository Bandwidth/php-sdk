<?php

declare(strict_types=1);

/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\Voice\Models;

use BandwidthLib\Utils\DateTimeHelper;

class CallState implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $callId;

    /**
     * @var string|null
     */
    private $parentCallId;

    /**
     * @var string|null
     */
    private $applicationId;

    /**
     * @var string|null
     */
    private $accountId;

    /**
     * @var string|null
     */
    private $to;

    /**
     * @var string|null
     */
    private $from;

    /**
     * @var string|null
     */
    private $direction;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $identity;

    /**
     * @var array|null
     */
    private $pai;

    /**
     * @var \DateTime|null
     */
    private $startTime;

    /**
     * @var \DateTime|null
     */
    private $answerTime;

    /**
     * @var \DateTime|null
     */
    private $endTime;

    /**
     * @var string|null
     */
    private $disconnectCause;

    /**
     * @var string|null
     */
    private $errorMessage;

    /**
     * @var string|null
     */
    private $errorId;

    /**
     * @var \DateTime|null
     */
    private $lastUpdate;

    /**
     * Returns Call Id.
     */
    public function getCallId(): ?string
    {
        return $this->callId;
    }

    /**
     * Sets Call Id.
     *
     * @maps callId
     */
    public function setCallId(?string $callId): void
    {
        $this->callId = $callId;
    }

    /**
     * Returns Parent Call Id.
     */
    public function getParentCallId(): ?string
    {
        return $this->parentCallId;
    }

    /**
     * Sets Parent Call Id.
     *
     * @maps parentCallId
     */
    public function setParentCallId(?string $parentCallId): void
    {
        $this->parentCallId = $parentCallId;
    }

    /**
     * Returns Application Id.
     */
    public function getApplicationId(): ?string
    {
        return $this->applicationId;
    }

    /**
     * Sets Application Id.
     *
     * @maps applicationId
     */
    public function setApplicationId(?string $applicationId): void
    {
        $this->applicationId = $applicationId;
    }

    /**
     * Returns Account Id.
     */
    public function getAccountId(): ?string
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     *
     * @maps accountId
     */
    public function setAccountId(?string $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns To.
     */
    public function getTo(): ?string
    {
        return $this->to;
    }

    /**
     * Sets To.
     *
     * @maps to
     */
    public function setTo(?string $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns From.
     */
    public function getFrom(): ?string
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @maps from
     */
    public function setFrom(?string $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Direction.
     */
    public function getDirection(): ?string
    {
        return $this->direction;
    }

    /**
     * Sets Direction.
     *
     * @maps direction
     */
    public function setDirection(?string $direction): void
    {
        $this->direction = $direction;
    }

    /**
     * Returns State.
     *
     * The current state of the call. Current possible values are 'initiated', 'answered' and
     * 'disconnected'. Additional states may be added in the future, so your application must be tolerant
     * of unknown values.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     *
     * The current state of the call. Current possible values are 'initiated', 'answered' and
     * 'disconnected'. Additional states may be added in the future, so your application must be tolerant
     * of unknown values.
     *
     * @maps state
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Identity.
     */
    public function getIdentity(): ?string
    {
        return $this->identity;
    }

    /**
     * Sets Identity.
     *
     * @maps identity
     */
    public function setIdentity(?string $identity): void
    {
        $this->identity = $identity;
    }

    /**
     * Returns Pai.
     */
    public function getPai(): ?array
    {
        return $this->pai;
    }

    /**
     * Sets Pai.
     *
     * @maps pai
     */
    public function setPai(?array $pai): void
    {
        $this->pai = $pai;
    }

    /**
     * Returns Start Time.
     */
    public function getStartTime(): ?\DateTime
    {
        return $this->startTime;
    }

    /**
     * Sets Start Time.
     *
     * @maps startTime
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStartTime(?\DateTime $startTime): void
    {
        $this->startTime = $startTime;
    }

    /**
     * Returns Answer Time.
     */
    public function getAnswerTime(): ?\DateTime
    {
        return $this->answerTime;
    }

    /**
     * Sets Answer Time.
     *
     * @maps answerTime
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setAnswerTime(?\DateTime $answerTime): void
    {
        $this->answerTime = $answerTime;
    }

    /**
     * Returns End Time.
     */
    public function getEndTime(): ?\DateTime
    {
        return $this->endTime;
    }

    /**
     * Sets End Time.
     *
     * @maps endTime
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEndTime(?\DateTime $endTime): void
    {
        $this->endTime = $endTime;
    }

    /**
     * Returns Disconnect Cause.
     *
     * The reason the call was disconnected, or null if the call is still active. Current values are
     * 'cancel', 'timeout', 'busy', 'rejected', 'hangup', 'invalid-bxml', 'callback-error', 'application-
     * error', 'error', 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes may be
     * added in the future, so your application must be tolerant of unknown values.
     */
    public function getDisconnectCause(): ?string
    {
        return $this->disconnectCause;
    }

    /**
     * Sets Disconnect Cause.
     *
     * The reason the call was disconnected, or null if the call is still active. Current values are
     * 'cancel', 'timeout', 'busy', 'rejected', 'hangup', 'invalid-bxml', 'callback-error', 'application-
     * error', 'error', 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes may be
     * added in the future, so your application must be tolerant of unknown values.
     *
     * @maps disconnectCause
     */
    public function setDisconnectCause(?string $disconnectCause): void
    {
        $this->disconnectCause = $disconnectCause;
    }

    /**
     * Returns Error Message.
     */
    public function getErrorMessage(): ?string
    {
        return $this->errorMessage;
    }

    /**
     * Sets Error Message.
     *
     * @maps errorMessage
     */
    public function setErrorMessage(?string $errorMessage): void
    {
        $this->errorMessage = $errorMessage;
    }

    /**
     * Returns Error Id.
     */
    public function getErrorId(): ?string
    {
        return $this->errorId;
    }

    /**
     * Sets Error Id.
     *
     * @maps errorId
     */
    public function setErrorId(?string $errorId): void
    {
        $this->errorId = $errorId;
    }

    /**
     * Returns Last Update.
     */
    public function getLastUpdate(): ?\DateTime
    {
        return $this->lastUpdate;
    }

    /**
     * Sets Last Update.
     *
     * @maps lastUpdate
     * @factory \BandwidthLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setLastUpdate(?\DateTime $lastUpdate): void
    {
        $this->lastUpdate = $lastUpdate;
    }

    /**
     * Encode this object to JSON
     *
     * @return mixed
     */
    public function jsonSerialize()
    {
        $json = [];
        $json['callId']          = $this->callId;
        $json['parentCallId']    = $this->parentCallId;
        $json['applicationId']   = $this->applicationId;
        $json['accountId']       = $this->accountId;
        $json['to']              = $this->to;
        $json['from']            = $this->from;
        $json['direction']       = $this->direction;
        $json['state']           = $this->state;
        $json['identity']        = $this->identity;
        $json['pai']             = $this->pai;
        $json['startTime']       =
            isset($this->startTime) ?
            DateTimeHelper::toRfc3339DateTime($this->startTime) : null;
        $json['answerTime']      =
            isset($this->answerTime) ?
            DateTimeHelper::toRfc3339DateTime($this->answerTime) : null;
        $json['endTime']         =
            isset($this->endTime) ?
            DateTimeHelper::toRfc3339DateTime($this->endTime) : null;
        $json['disconnectCause'] = $this->disconnectCause;
        $json['errorMessage']    = $this->errorMessage;
        $json['errorId']         = $this->errorId;
        $json['lastUpdate']      =
            isset($this->lastUpdate) ?
            DateTimeHelper::toRfc3339DateTime($this->lastUpdate) : null;

        return array_filter($json, function ($val) {
            return $val !== null;
        });
    }
}
