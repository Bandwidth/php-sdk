<?php
/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BandwidthLib\Voice\Controllers;

use BandwidthLib\APIException;
use BandwidthLib\APIHelper;
use BandwidthLib\Voice\Exceptions;
use BandwidthLib\Voice\Models;
use BandwidthLib\Controllers\BaseController;
use BandwidthLib\Http\ApiResponse;
use BandwidthLib\Http\HttpRequest;
use BandwidthLib\Http\HttpResponse;
use BandwidthLib\Http\HttpMethod;
use BandwidthLib\Http\HttpContext;
use BandwidthLib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class APIController extends BaseController
{
    public function __construct($config, $httpCallBack = null)
    {
        parent::__construct($config, $httpCallBack);
    }

    /**
     * Creates an outbound phone call.
     *
     * @param string $accountId TODO: type description here
     * @param Models\CreateCallRequest $body      TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createCall(
        string                   $accountId,
        Models\CreateCallRequest $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\CreateCallResponse');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns near-realtime metadata about the specified call.
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCall(
        string $accountId,
        string $callId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\CallState');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

/**
     * Replaces the bxml for an active call
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @param string $body      Valid BXML string
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyCallBxml(
        string $accountId,
        string $callId,
        string $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/bxml';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId' => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/xml; charset=utf-8'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $body);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type for this endpoint. If a request body is required, please send it to us as ' .
                '`application/xml`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Interrupts and replaces an active call's BXML document.
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @param Models\ModifyCallRequest $body      TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyCall(
        string                   $accountId,
        string                   $callId,
        Models\ModifyCallRequest $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Pauses or resumes a recording.
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @param Models\ModifyCallRecordingRequest $body      TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyCallRecordingState(
        string                            $accountId,
        string                            $callId,
        Models\ModifyCallRecordingRequest $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recording';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified call.
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCallRecordings(
        string $accountId,
        string $callId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray(
            $response->body,
            'BandwidthLib\\Voice\\Models\\CallRecordingMetadata'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns metadata for the specified recording.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCallRecording(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\CallRecordingMetadata'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Deletes the specified recording.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteRecording(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Downloads the specified recording.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getDownloadCallRecording(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $deserializedResponse = $response->body;
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Deletes the specified recording's media.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteRecordingMedia(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Downloads the specified transcription.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCallTranscription(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\TranscriptionResponse'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Requests that the specified recording be transcribed.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @param Models\TranscribeRecordingRequest $body        TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createTranscribeCallRecording(
        string                            $accountId,
        string                            $callId,
        string                            $recordingId,
        Models\TranscribeRecordingRequest $body
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 410) {
            throw new Exceptions\ApiErrorException(
                'The media for this recording has been deleted, so we can\'t transcribe it',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Deletes the specified recording's transcription.
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCallTranscription(
        string $accountId,
        string $callId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns information about the conferences in the account.
     *
     * @param string $accountId      TODO: type description here
     * @param string|null $name           (optional) TODO: type description here
     * @param string|null $minCreatedTime (optional) TODO: type description here
     * @param string|null $maxCreatedTime (optional) TODO: type description here
     * @param integer $pageSize       (optional) Example: 1000
     * @param string|null $pageToken      (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferences(
        string $accountId,
        string $name = null,
        string $minCreatedTime = null,
        string $maxCreatedTime = null,
        int    $pageSize = 1000,
        string $pageToken = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'      => $accountId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'name'           => $name,
            'minCreatedTime' => $minCreatedTime,
            'maxCreatedTime' => $maxCreatedTime,
            'pageSize'       => (null != $pageSize) ? $pageSize : 1000,
            'pageToken'      => $pageToken,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray($response->body, 'BandwidthLib\\Voice\\Models\\ConferenceState');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns information about the specified conference.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConference(
        string $accountId,
        string $conferenceId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\ConferenceState');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Modify the conference state.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param Models\ModifyConferenceRequest $body         TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyConference(
        string                         $accountId,
        string                         $conferenceId,
        Models\ModifyConferenceRequest $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Updates settings for a particular conference member.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param string $callId       TODO: type description here
     * @param Models\ConferenceMemberState $body         TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyConferenceMember(
        string                       $accountId,
        string                       $conferenceId,
        string                       $callId,
        Models\ConferenceMemberState $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            'callId'       => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns information about the specified conference member.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param string $memberId     TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferenceMember(
        string $accountId,
        string $conferenceId,
        string $memberId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            'memberId'     => $memberId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\ConferenceMemberState'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified conference
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferenceRecordings(
        string $accountId,
        string $conferenceId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray(
            $response->body,
            'BandwidthLib\\Voice\\Models\\ConferenceRecordingMetadata'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns metadata for the specified recording.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param string $recordingId  TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferenceRecording(
        string $accountId,
        string $conferenceId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            'recordingId'  => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\CallRecordingMetadata'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Downloads the specified recording.
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param string $recordingId  TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getDownloadConferenceRecording(
        string $accountId,
        string $conferenceId,
        string $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            'recordingId'  => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $deserializedResponse = $response->body;
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns a list of metadata for the recordings associated with the specified account. The list can be
     * filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at
     * 1000 entries and may be empty if no recordings match the specified criteria.
     *
     * @param string $accountId    TODO: type description here
     * @param string|null $from         (optional) TODO: type description here
     * @param string|null $to           (optional) TODO: type description here
     * @param string|null $minStartTime (optional) TODO: type description here
     * @param string|null $maxStartTime (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getQueryCallRecordings(
        string $accountId,
        string $from = null,
        string $to = null,
        string $minStartTime = null,
        string $maxStartTime = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/recordings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'from'         => $from,
            'to'           => $to,
            'minStartTime' => $minStartTime,
            'maxStartTime' => $maxStartTime,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorException('Something unexpected happened. Please try again.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray(
            $response->body,
            'BandwidthLib\\Voice\\Models\\CallRecordingMetadata'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }
}
