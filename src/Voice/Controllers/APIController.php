<?php
/*
 * BandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace BandwidthLib\Voice\Controllers;

use BandwidthLib\APIException;
use BandwidthLib\APIHelper;
use BandwidthLib\Voice\Exceptions;
use BandwidthLib\Voice\Models;
use BandwidthLib\Controllers\BaseController;
use BandwidthLib\Http\ApiResponse;
use BandwidthLib\Http\HttpRequest;
use BandwidthLib\Http\HttpResponse;
use BandwidthLib\Http\HttpMethod;
use BandwidthLib\Http\HttpContext;
use BandwidthLib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class APIController extends BaseController
{
    public function __construct($config, $httpCallBack = null)
    {
        parent::__construct($config, $httpCallBack);
    }

    /**
     * Creates an outbound call
     *
     * @param string                      $accountId TODO: type description here
     * @param Models\ApiCreateCallRequest $body      (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createCall(
        $accountId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\ApiCallResponse');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns near-realtime metadata about the specified call
     *
     * @param string $accountId TODO: type description here
     * @param string $callId    TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCallState(
        $accountId,
        $callId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\ApiCallStateResponse');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Interrupts and replaces an active call's BXML document
     *
     * @param string                      $accountId TODO: type description here
     * @param string                      $callId    TODO: type description here
     * @param Models\ApiModifyCallRequest $body      (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyCall(
        $accountId,
        $callId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Pauses or resumes a recording
     *
     * @param string                          $accountId TODO: type description here
     * @param string                          $callId    TODO: type description here
     * @param Models\ModifyCallRecordingState $body      (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyCallRecordingState(
        $accountId,
        $callId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recording';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId' => $accountId,
            'callId'    => $callId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns a (potentially empty) list of metadata for the recordings that took place during the
     * specified call
     *
     * @param string $accountId    TODO: type description here
     * @param string $callId       TODO: type description here
     * @param string $from         (optional) TODO: type description here
     * @param string $to           (optional) TODO: type description here
     * @param string $minStartTime (optional) TODO: type description here
     * @param string $maxStartTime (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getQueryMetadataForAccountAndCall(
        $accountId,
        $callId,
        $from = null,
        $to = null,
        $minStartTime = null,
        $maxStartTime = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'callId'       => $callId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'from'         => $from,
            'to'           => $to,
            'minStartTime' => $minStartTime,
            'maxStartTime' => $maxStartTime,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray(
            $response->body,
            'BandwidthLib\\Voice\\Models\\RecordingMetadataResponse'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns metadata for the specified recording
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getMetadataForRecording(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\RecordingMetadataResponse'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Deletes the specified recording
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteRecording(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Downloads the specified recording
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getStreamRecordingMedia(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $deserializedResponse = $response->body;
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Deletes the specified recording's media
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteRecordingMedia(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Downloads the specified transcription
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getRecordingTranscription(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\TranscriptionResponse'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Requests that the specified recording be transcribed
     *
     * @param string                               $accountId   TODO: type description here
     * @param string                               $callId      TODO: type description here
     * @param string                               $recordingId TODO: type description here
     * @param Models\ApiTranscribeRecordingRequest $body        (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createTranscribeRecording(
        $accountId,
        $callId,
        $recordingId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 410) {
            throw new Exceptions\ApiErrorResponseException(
                'The media for this recording has been deleted, so we can\'t transcribe it',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Deletes the specified recording's transcription
     *
     * @param string $accountId   TODO: type description here
     * @param string $callId      TODO: type description here
     * @param string $recordingId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteRecordingTranscription(
        $accountId,
        $callId,
        $recordingId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'   => $accountId,
            'callId'      => $callId,
            'recordingId' => $recordingId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns information about the specified conference
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferenceById(
        $accountId,
        $conferenceId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass($response->body, 'BandwidthLib\\Voice\\Models\\ConferenceDetail');
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Modify the conference state
     *
     * @param string                                   $accountId    TODO: type description here
     * @param string                                   $conferenceId TODO: type description here
     * @param Models\CallEngineModifyConferenceRequest $body         (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function modifyConference(
        $accountId,
        $conferenceId,
        $body = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/conferences/{conferenceId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        return new ApiResponse($response->code, $response->headers, null);
    }

    /**
     * Returns information about the specified conference member
     *
     * @param string $accountId    TODO: type description here
     * @param string $conferenceId TODO: type description here
     * @param string $memberId     TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getConferenceMember(
        $accountId,
        $conferenceId,
        $memberId
    ) {

        //prepare query string for API call
        $_queryBuilder = 
            '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            'conferenceId' => $conferenceId,
            'memberId'     => $memberId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClass(
            $response->body,
            'BandwidthLib\\Voice\\Models\\ConferenceMemberDetail'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }

    /**
     * Returns a list of metadata for the recordings associated with the specified account. The list can be
     * filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at
     * 1000 entries and may be empty if no recordings match the specified criteria.
     *
     * @param string $accountId    TODO: type description here
     * @param string $from         (optional) TODO: type description here
     * @param string $to           (optional) TODO: type description here
     * @param string $minStartTime (optional) TODO: type description here
     * @param string $maxStartTime (optional) TODO: type description here
     * @return ApiResponse response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getQueryMetadataForAccount(
        $accountId,
        $from = null,
        $to = null,
        $minStartTime = null,
        $maxStartTime = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api/v2/accounts/{accountId}/recordings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'accountId'    => $accountId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'from'         => $from,
            'to'           => $to,
            'minStartTime' => $minStartTime,
            'maxStartTime' => $maxStartTime,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($this->config->getBaseUri(Servers::VOICEDEFAULT) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json'
        );

        //set HTTP basic auth parameters
        Request::auth($this->config->getVoiceBasicAuthUserName(), $this->config->getVoiceBasicAuthPassword());

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }
        // Set request timeout
        Request::timeout($this->config->getTimeout());

        // and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ApiErrorResponseException(
                'Something\'s not quite right... Your request is invalid. Please fix it before trying again.',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new APIException(
                'Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to ' .
                'the API.',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ApiErrorResponseException('User unauthorized to perform this action.', $_httpContext);
        }

        if ($response->code == 404) {
            throw new Exceptions\ApiErrorResponseException(
                'The resource specified cannot be found or does not belong to you.',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ApiErrorResponseException(
                'We don\'t support that media type. If a request body is required, please send it to us as ' .
                '`application/json`.',
                $_httpContext
            );
        }

        if ($response->code == 429) {
            throw new Exceptions\ApiErrorResponseException(
                'You\'re sending requests to this endpoint too frequently. Please slow your request rate down and ' .
                'try again.',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new Exceptions\ApiErrorResponseException(
                'Something unexpected happened. Please try again.',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
        $mapper = $this->getJsonMapper();
        $deserializedResponse = $mapper->mapClassArray(
            $response->body,
            'BandwidthLib\\Voice\\Models\\RecordingMetadataResponse'
        );
        return new ApiResponse($response->code, $response->headers, $deserializedResponse);
    }
}
